import "../styles/dashboardMoreInfoStyle.scss";
import { useState, useEffect, useCallback } from "react";
import { useParams } from "react-router-dom";
import { fetchUsersWithCommonEvents } from "../sanity/userServices";
import { getApiIdBySanityId } from "../sanity/eventServices";
import PageNotFound from './PageNotFound';
import Loading from "../components/Loading";
import { getEventById } from "../api/ticketmasterApiServices";

export default function DashboardMoreInfoPage({ pageType }) {
    const { id } = useParams(); // Get the sanity-event-ID from the URL
    const [usersWithCommonEvents, setUsersWithCommonEvents] = useState([]);
    const [currentEvent, setCurrentEvent] = useState(null);
    const [loading, setLoading] = useState(true); // Own state to manage loading. Starts as true, since we want to show loading spinner while fetching API data.

    // Method to fetch users with common events. Checks every user.
    const fetchUsersWithCommonEventsHandler = useCallback(async () => {
        try {
            const users = await fetchUsersWithCommonEvents(id);
            setUsersWithCommonEvents(users);
        } catch (error) {
            console.error("Error fetching users with common events:", error);
        }
    }, [id]);

    // Fetch data when the component mounts and if an ID is provided
    // This will fetch the event details from Ticketmaster and the users with common events.
    useEffect(() => {
        const fetchData = async () => {
            setLoading(true);
            try {
                const ticketMasterId = await getApiIdBySanityId(id); // Get Ticketmaster ID from Sanity
                const apiEvent = await getEventById(ticketMasterId); // Fetch event details from Ticketmaster

                if (apiEvent)
                    setCurrentEvent(apiEvent); // Set the event details from Ticketmaster

                await fetchUsersWithCommonEventsHandler();
            } catch (error) {
                console.error("Error fetching data:", error);
            } finally {
                setLoading(false);
            }
        };

        if (id) { // Fetch data if id is provided
            fetchData();
        }
    }, [id, fetchUsersWithCommonEventsHandler]);

    // Check if loading is true, if so, show loading spinner
    if (loading) {
        return Loading();
    }
    // Check if currentEvent exists, if not, show PageNotFound
    if (!currentEvent) {
        return <PageNotFound />; // Show PageNotFound if event is not found
    }

    // Generated by GitHub Copilot
    // Prompt: "Create methods to format date and time to EU/Norwegian format (DD.MM.YYYY) and (HH:MM)"
    // Result: Returned to methods/functions "formatDate" and "formatTime"
    const formatDate = (dateString) => {
        if (!dateString) return "";
        const date = new Date(dateString);
        if (isNaN(date)) return dateString;
        const options = { year: "numeric", month: "2-digit", day: "2-digit" };
        const formattedDate = date.toLocaleDateString("no-NO", options);
        return formattedDate;
    };

    // Generated by GitHub Copilot
    // Prompt: "Create methods to format date and time to EU/Norwegian format (DD.MM.YYYY) and (HH:MM)"
    // Result: Returned to methods/functions "formatDate" and "formatTime"
    const formatTime = (timeString) => {
        const [hours, minutes] = timeString.split(":");
        return `${hours}:${minutes}`;
    };

    return (
        <div id="dashboard-more-info-page">
            <section id="more-info-header">
                <button onClick={() => window.history.back()} className="back-button">
                    <i className="fas fa-arrow-left"></i>
                </button>
                <h1>Arrangementdetaljer</h1>
            </section>
            <section className="more-info-details">
                <article>
                    <p><strong>Ticketmaster ID:</strong> {currentEvent.id}</p>
                    <p><strong>Tittel:</strong> {currentEvent.name}</p>
                    <p><strong>Dato:</strong> {formatDate(currentEvent.dates?.start?.localDate)}</p>
                    <p><strong>Klokkeslett:</strong> {formatTime(currentEvent.dates?.start?.localTime)}</p>
                    <p><strong>Sted:</strong> {currentEvent._embedded?.venues?.[0]?.name} - {currentEvent._embedded?.venues?.[0]?.city?.name}, {currentEvent._embedded?.venues?.[0]?.country?.name}</p>
                    <p><strong>Sjanger:</strong> {currentEvent.classifications?.[0]?.genre?.name || "Ikke oppgitt"}</p>
                </article>
                <aside>
                    <img src={currentEvent.images?.[2]?.url || "https://placehold.co/200x200?text=Ingen+Bilde"} alt={currentEvent.name} />
                </aside>
            </section>
            <article className="more-info-friends">
                <h2>
                    {pageType === "wishlist"
                        ? "Personer som har lagt til dette arrangementet i ønskelisten"
                        : "Personer som har kjøpt billetter til dette arrangementet"}
                </h2>
                {usersWithCommonEvents.length > 0 ? (
                    <ul>
                        {usersWithCommonEvents.map((user) => (
                            <li key={user._id}>
                                <img
                                    src={user.photo?.asset?.url || "https://placehold.co/50x50?text=Ingen+Bilde"}
                                    alt={`${user.firstName} ${user.lastName}`}
                                />
                                <p>{`${user.firstName} ${user.lastName}`}</p>
                            </li>
                        ))}
                    </ul>
                ) : (
                    <p>
                        {pageType === "wishlist"
                            ? "Ingen personer har lagt til dette arrangementet i ønskelisten sin."
                            : "Ingen personer har kjøpt billetter til dette arrangementet."}
                    </p>
                )}
            </article>
        </div>
    );
}